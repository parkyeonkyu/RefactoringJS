//중개자 제거하기

manager = aPerson.manager;
class Person {
    get manager() { return this.department.manager; }
}
↓
manager = aPerson.department.manager;

//배경
//위임숨기기에서 객체를 캡슐화하는 이점을 설명했다.
//이 이점이 거저 주어지는것은 아니다. 클라이언트가 위임객체의 또다른 기능을 사용하고 싶을때마다 서버에 위임메서드를 추가해야 하는데
//이렇게 기능을 추가하다보면 단순히 전달만하는 위임메서드들이 점점 성가셔진다. 
//그러면 서버 클래스는 그저 중개자 역할로 전락하여, 차라리 클라이언트가 위임객체를 직접 호출하는게 나을 수도 있다.
//상황에맞게 중개자제거, 위임숨기기를 오가며 조절한다.

//절차
//1. 위임객체를 얻는 게터를 만든다
//2. 위임 메서드를 호출하는 클라이언트가 모두 이 게터를 거치도록 수정한다. 하나씩 바꿀때마다 테스트한다.
//3. 모두 수정했다면 위임 메서드를 삭제한다.
//>> 자동 리팩토링 도구를 사용할때는 위임 필드를 캡슐화 한다음, 이를 사용하는 모든 메서드를 인라인 한다.

//예시
//클라이언트
manager = aPerson.manager;

//Person클래스
get manager(){ return this._department.manager; }

//Department클래스
get manager() { return this.manager; }

//사용하기 쉽게 부서는 캡슐화되어있다. 하지만 이런 위임 메서드가 많아지면 사라맘 클래스의 상당 부분이
//그저 위임하는데만 쓰일 것이다.그럴때는 중개자를 제거하는 편이 낫다. 
//1. 먼저 위임객체(부서)를 얻는 게터를 만들자
//Person클래스
get department() { return this._department; }
//2. 이제 각 클라이언트가 부서 객체를 직접사용하도록 고친다.
//클라이언트
manager = aPerson.department.manager;

//3.클라이언트를 모두고쳤다면 Person의 manager()메서드를 삭제한다. 
//  Person에 단순한 위임메서드가 더는 남지 않을때까지 이 작업을 반복한다.

//****위임숨기기와 중개자 제거하기를 적당히 섞어도된다 */
//자주쓰는 위임은 그대로 두고, 상황에 맞게 처리하면된다.

//자동 리팩터링을 사용한다면
//1. 부서 필드를 캡슐화한다. 그러면 관리자 게터에서 부서의 public게터를 사용할 수 있다.
//Person클래스
get manager() { return this.department.manager; }

//자바스크립트에서는 이 변화가 잘드러나지않지만, department앞의 밑줄(_)을 빼면,
//더이상 필드를 직접접근하지않고 새로 만든게터를 사용한다는 뜻이다.
//그런다음 manager()메서드를 인라인하여 모든 호출자를 한 번에 교체한다.